Luthier: automated builds
=========================

Luthier will automate the fetching and building of something, deciding
when to keep the results and notify developers.

It has been used successfully to make simple CI/CD pipelines.

Motivations:

* Lightweight: usable for personal projects
* 'Unix-like' feel
* 'Silent on success', low noise
* Good defaults
* Use with any version control, not just Git
* Choose your own build environment, eg. default environment, or docker

The 'build' step can mean anything you want; build, test, deploy.


Setting up
----------

Create a 'builds' directory to use as scratch/workspace:

  $ mkdir mywork

In that directory, a script defines a set of actions;

  $ vi builds/luthier.sh

Take a look at the example file for what these functions are
and why they exist.


Running
-------

This command will run the most recent automated build, and notify
where necessary:

  $ luthier --verbose --builds mywork build

It's designed to be run from crontab or non-interactive environment,
by being silent except on fatal errors; build errors are emailed
separately. This is the command to put in a crontab:

  $ luthier --builds /path/to/mywork build

Other useful commands are:

  $ luthier freshen     # force rebuild even if fingerprints match
  $ luthier list        # list current builds
  $ luthier purge       # purge old builds

The default path for builds is the current directory, so interactive
commands are easiest run like that.


Code
----

The code is Bash shell, developed on Linux with GNU utilities. In
general there is a leaning towards future portability and use of
Bash-specific features sparingly.
