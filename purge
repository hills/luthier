#
# Automatically purge old builds; careful!
#

#
# Output the list of builds
#
# Do as much validation as possible that these are directories
# managed by this application.
#

candidates()
{
	find "$BUILDS" -maxdepth 1 -mindepth 1 -type d -printf "%f\n" |
		while read CANDIDATE
	do
		METADATA="$BUILDS/$CANDIDATE/.luthier"

		if [ -d "$METADATA" ]; then
			verbose "$CANDIDATE: identified as a build"
			echo "$CANDIDATE"
		else
			verbose "$CANDIDATE: ignoring; not a build"
		fi
	done
}

#
# Pass if the given argument is a positive integer
#

is_number()
{
	test "$1" -ge 0 2> /dev/null
}

if ! [ -d "$STATE" ]; then
	error "$STATE: doesn't look like one of our build directories"
	exit 1
fi

#
# Start with some useful defaults, parse the rest
#

RETAIN=
DRY=

while true; do
	case "${1-}" in
	--retain)
		shift
		RETAIN="$1"; shift
		;;
	--dry-run)
		shift
		DRY="echo"
		;;
	'')
		break
		;;
	*)
		fatal_option "$@"
		;;
	esac
done

if [ -z "$RETAIN" ]; then
	fatal_usage "Number of builds must be given; try --retain"
fi

if ! is_number "$RETAIN"; then
	fatal_usage "$RETAIN: number of builds must be a positive integer"
fi

LINES=$(expr "$RETAIN" + 1)

candidates |
	sort -r |
	tail --lines "+$LINES" |
	while read TARGET
do
	verbose "$TARGET: identified for deletion"
	$DRY rm -rf -- "$BUILDS/$TARGET"
done
